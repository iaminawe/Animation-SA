<?php
// $Id: pageroute_ui.module,v 1.29.2.7 2007/10/11 12:35:51 fago Exp $

/**
 * @file
 * Adminstration pages allowing you to create and edit pageroutes.
 */


/**
 * Implementation of hook_help().
 */
function pageroute_ui_help($section) {

  switch ($section) {
    case 'admin/help#pageroute_ui':
      return _pageroute_ui_get_help();
    case 'admin/build/pageroute/route/'. arg(4) .'/add':
      if (module_exists('help')) {
        return t('Have a look at the pageroute !link for some explanation of '.
                 'the pageroute page types.',
                 array(
                   '!link' => l(t('Documentation'), 'admin/help/pageroute_ui')
                 ));
      }
      else {
        return t('Activate the help module if you need some '.
                 'explanation of the pageroute page types.');
      }

  }
}



/**
 * Implementation of hook_menu().
 */
function pageroute_ui_menu($may_cache) {

  if ($may_cache) {
    $access = user_access('administer pageroutes');

    $items[] = array(
    'path' => 'admin/build/pageroute',
    'title' => t('Pageroute'),
    'description' => t('Manage your pageroutes.'),
    'callback' => 'pageroute_ui_admin',
    'access' => $access
    );
    $items[] = array(
    'path' => 'admin/build/pageroute/list',
    'title' => t('List routes'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
    );
    $items[] = array(
    'path' => 'admin/build/pageroute/add',
    'title' => t('Add route'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('pageroute_ui_route_edit', 'add'),
    'access' => $access,
    'type' => MENU_LOCAL_TASK
    );
    $items[] = array(
    'path' => 'admin/build/pageroute/delete',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('pageroute_ui_route_delete_confirm'),
      'access' => $access,
      'type' => MENU_CALLBACK
      );
  }
  else if (is_numeric(arg(4))) {
    $items[] = array(
    'path' => 'admin/build/pageroute/route/'. arg(4) .'/edit',
    'title' => t('Edit route'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('pageroute_ui_route_edit', 'edit', arg(4)),
    'access' => $access,
    'type' => MENU_LOCAL_TASK,
    'weight' => -20,
    );
    $items[] = array(
    'path' => 'admin/build/pageroute/route/'. arg(4),
    'callback' => 'pageroute_ui_page_edit_page',
      'type' => MENU_CALLBACK,
      'access' => $access
    );
    $items[] = array(
      'path' => 'admin/build/pageroute/route/'. arg(4) .'/list',
      'title' => t('List pages'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10
    );
    $items[] = array(
      'path' => 'admin/build/pageroute/route/'. arg(4) .'/add',
      'title' => t('Add page'),
      'callback' => 'pageroute_ui_page_edit_page',
      'access' => $access,
      'type' => MENU_LOCAL_TASK
    );
    $items[] = array(
      'path' => 'admin/build/pageroute/route/'. arg(4) .'/edit/'. arg(6),
      'callback' => 'pageroute_ui_page_edit_page',
      'access' => $access,
      'type' => MENU_CALLBACK
    );
    $items[] = array(
      'path' => 'admin/build/pageroute/route/'. arg(4) .'/delete',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('pageroute_ui_page_delete_confirm', arg(4), arg(6)),
      'access' => $access,
      'type' => MENU_CALLBACK
    );
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function pageroute_ui_perm() {
  return array('administer pageroutes');
}


function pageroute_ui_admin() {

  $result = db_query("SELECT * FROM {pageroute_routes} ORDER BY path");

  $header = array(t('Path'), array('data' => t('Operations'), 'colspan' => '3'));

  while ($route = db_fetch_object($result)) {
    $row = array();
    $row[] = check_plain($route->path);
    $row[] = l(t('Edit route'), "admin/build/pageroute/route/$route->prid/edit");
    $row[] = l(t('Edit pages'), "admin/build/pageroute/route/$route->prid/list");
    $row[] = l(t('Add page'), "admin/build/pageroute/route/$route->prid/add");
    $rows[] = $row;
  }

  if (empty($rows)) {
    $rows[] = array(array('data' => t('No routes available.'), 'colspan' => '4', 'class' => 'message'));
  }

  return theme('table', $header, $rows, array('id' => 'pageroute'));
}


function pageroute_ui_route_edit($op = 'add', $prid = NULL) {
  if ($op != 'add' && is_numeric($prid)) {
    $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", $prid));
    $route->options = unserialize($route->options);
    drupal_set_title(t('Edit route'));
  }

  $form['path'] = array('#type' => 'textfield', 
                        '#title' => t('Path'), 
                        '#maxlength' => 127,
                        '#default_value' => $route ? $route->path : '',
                        '#required' => TRUE,
                        '#weight' => -5,
                  );
  $form['options']['#tree'] = TRUE;
  $form['options']['tabs'] = array(
    '#type' => 'radios',
    '#title' => t('Tabs'),
    '#options' => array(
      0 => t('Don\'t show any tabs'),
      PAGEROUTE_MENU_TABS => t('Use the common drupal menu tabs'),
      PAGEROUTE_BUTTON_TABS => t('Show tab-like submit buttons above the page content.'),
    ),
    '#default_value' => isset($route->options['tabs']) ? $route->options['tabs'] : 0,
    '#description' => t('Note that the commom drupal menu tabs won\'t save the actual form, if they are used. Also any arguments appended to the URL will be lost. They are in particular useful for pageroutes, which focus on displaying content.'),
    '#weight' => -1,
  );
  $form['options']['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access control'),
    '#collapsible' => TRUE,
  );
  $form['options']['access']['allowed_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Permit access to the pageroute for only this roles'),
    '#options' => user_roles(),
    '#default_value' => isset($route->options['access']['allowed_roles']) ? $route->options['access']['allowed_roles'] : array(2),
  );
  $form['options']['access']['#weight'] = 5;

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
    '#weight' => 10,
  );
  $form['advanced']['options']['#tree'] = TRUE;
  $form['advanced']['options']['redirect_path'] = array(
    '#type' => 'textfield', 
    '#title' => t('Customized redirect path'),
    '#default_value' => $route->options['redirect_path'],
    '#maxlength' => 64,
    '#size' => 45,
    '#description' => t('If entered, a user will be redirected to this path after he has completed the pageroute. Specify an existing path. For example: node/28, user, taxonomy/term/1+2.'). ' '.
                      t('You may also use the following replacement variables: !uid (User ID), !nid (Node ID). For example use: node/!nid to redirect to the node with the id taken from the pageroute arguments.'),
    '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q=')
  );
  $form['advanced']['options']['no_messages'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Don\'t show drupal messages during this route.'),
    '#default_value' => isset($route->options['no_messages']) ? $route->options['no_messages'] : 1,
  );
  $form['advanced']['options']['destination'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Preserve destination parameter during this route.'),
    '#default_value' => isset($route->options['destination']) ? $route->options['destination'] : 1,
  );
  if (module_exists('states')) {
    $form['advanced']['options']['track_user'] = array(
      '#type' => 'checkbox',
      '#title' => t('Verify that a user goes through each page of the route.'),
      '#default_value' => $route->options['track_user'],
      '#description' => t('If checked, pageroute verifies that a user can only reach the next page. '.
        'To achieve this, it will track how far a user has ever gone through the route by using the states module.'),
    );
  }

  $form['submit'] = array('#type' => 'submit',
                          '#value' => t('Submit'),
                          '#weight' => 15,
                    );
  if ($route) {
    $form['delete'] = array('#type' => 'submit',
                          '#value' => t('Delete'),
                          '#weight' => 16,
                      );
  }
  else {
    $route = (object) array('new' => TRUE);
  }

  $form['route'] = array('#type' => 'value', '#value' => &$route);

  $form['#validate'] = array('pageroute_ui_route_edit_validate' => array());
  $form['#submit'] = array('pageroute_ui_route_edit_submit' => array());

  return $form;
}

function pageroute_ui_route_edit_validate($form_id, &$form_values, &$form) {

  $path = rtrim(ltrim($form_values['path'], '/'), '/');
  form_set_value($form['path'], $path);

  if (!valid_url($path)) {
    form_set_error('path', t('The path has to be a valid URL.'));
  }
  if ($form_values['route']->path != $path && menu_get_item(NULL, $path)) {
    form_set_error('path', t('This drupal path is already in use. Choose another path.'));
  }
}

function pageroute_ui_route_edit_submit($form_id, &$form_values) {
  $form_values['options']['arg_offset'] = substr_count($form_values['path'], '/') + 1;

  if (!$form_values['route']->new) {
    if ($form_values['op'] == t('Delete')) {
      return 'admin/build/pageroute/delete/' . $form_values['route']->prid;
    }
    db_query("UPDATE {pageroute_routes} SET path = '%s', options = '%s' WHERE prid = %d", 
             $form_values['path'], serialize($form_values['options']), $form_values['route']->prid);
  }
  else {
    $form_values['route']->prid = db_next_id('{pageroute}_rid');
    db_query("INSERT INTO {pageroute_routes} (prid, path, options) VALUES(%d, '%s', '%s')", 
             $form_values['route']->prid, $form_values['path'], serialize($form_values['options']));
  }
  if (module_exists('states')) {
    states_clear_machine_cache();
  }
  cache_clear_all('*', 'cache_menu', TRUE);
  return 'admin/build/pageroute';
}

function pageroute_ui_route_delete_confirm($route) {

  if (is_numeric(arg(4))) {
    $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", arg(4)));
    $route->options = unserialize($route->options);
  }
  if (!$route) {
    drupal_not_found();
    exit;
  }

  $form['route'] = array('#type' => 'value', '#value' => $route);

  return confirm_form($form,
    t('Are you sure you want to delete the route %path?', array('%path' => $route->path)),
    'admin/build/pageroute',
    t('Deleting a route will delete all the pages you created in it. This action cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

function pageroute_ui_route_delete_confirm_submit($form_id, &$form_values) {
  db_query("DELETE FROM {pageroute_pages} WHERE prid = %d", $form_values['route']->prid);
  db_query("DELETE FROM {pageroute_routes} WHERE prid = %d", $form_values['route']->prid);
  cache_clear_all('*', 'cache_menu', TRUE);
  drupal_set_message('Your route has been deleted.');
  return 'admin/build/pageroute';
}



function pageroute_ui_page_edit_page() {
  if (is_numeric(arg(4))) {
    $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", arg(4)));
    $route->options = unserialize($route->options);
  }
  if (!$route) {
    drupal_not_found();
    exit;
  }

  if (arg(5) == 'add') {
    drupal_set_title(check_plain($route->path));
    if (in_array(arg(6), array_keys(pageroute_get_types()))) {
      $type = arg(6);
    }
    else {
      return drupal_get_form('pageroute_ui_page_add_type');
    }
  }
  else if (arg(5) != 'edit') {
    return pageroute_ui_route_overview($route);
  }
  else if (arg(6)) {
    $page = pageroute_load_page(arg(6), $route);
    if (!$page) {
      drupal_not_found();
      exit;
    }
    drupal_set_title(check_plain($page->name));
    $type = $page->type;
  }

  return drupal_get_form('pageroute_ui_page_edit', $route, $page, $type);
}

function pageroute_ui_page_edit($route, $page, $type) {

  if ($help = pageroute_invoke($type, 'help')) {
    $form['help'] = array(
      '#type' => 'fieldset',
      '#title' => t('Help'),
      '#collapsible' => TRUE,
      '#description' => $help,
    );
  }

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#maxlength' => 63,
    '#default_value' => $page->name,
    '#required' => TRUE,
    '#description' => t('Last part of the page\'s URL. Used for identifing the page.'),
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#maxlength' => 255,
    '#default_value' => $page->title,
    '#description' => t('An optional title which will be set when the page is viewed.'),
    '#weight' => 1,
  );
  $form['options']['activated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activated'),
    '#default_value' => isset($page->options['activated']) ? $page->options['activated'] : 1,
    '#description' => t('When the pageroute is generated, deactivated pages will be ignored.'),
    '#weight' => 0,
  );
  if ($page->route->options['tabs']) {
    $form['options']['no_tab'] = array(
      '#type' => 'checkbox',
      '#title' => t('Don\'t show a tab for this page'),
      '#default_value' => $page->options['no_tab'],
      '#weight' => 1,
    );
  }
  $form['options']['forward'] = array(
    '#type' => 'textfield',
    '#title' => t('Forward button label'),
    '#maxlength' => 32,
    '#default_value' => isset($page->options['forward']) ? $page->options['forward'] : t('Forward'),
    '#description' => t('The label of the forward button. Leave it empty to hide the button.'),
    '#weight' => 3,
  );
  $form['options']['back'] = array(
    '#type' => 'textfield',
    '#title' => t('Back button label'),
    '#maxlength' => 32,
    '#default_value' => isset($page->options['back']) ? $page->options['back'] : t('Back'),
    '#description' => t('The label of the back button. Leave it empty to hide the button.'),
    '#weight' => 4,
  );
  $form['options']['cancel'] = array(
    '#type' => 'textfield',
    '#title' => t('Cancel link label'),
    '#maxlength' => 32,
    '#default_value' => $page->options['cancel'],
    '#description' => t('The label of the cancel link. Leave it empty to hide the link, but note that the link is the only possibility for the user to not save the form while staying in the route.'),
    '#weight' => 3,
  );
  $form['options']['#tree'] = TRUE;
  $form['options']['#weight'] = 3;

  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $page->weight,
    '#description' => t('Used for ordering the pages. Pages with lower weights are used first.'),
    '#weight' => 7,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 9,
  );

  if ($page) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 10,
    );
  }

  $form['page_type'] = array('#type' => 'value', '#value' => $type);
  $form['page'] = array('#type' => 'value', '#value' => $page);
  $form['route'] = array('#type' => 'value', '#value' => $route);
  
  //let the page type add further form items
  $bases = pageroute_get_types('base');
  $function = $bases[$type] .'_page_'. $type. '_ui';
  if (function_exists($function)) {
    $function($route, $page, $form, $type);
  }

  return $form;
}

function pageroute_ui_page_edit_validate($form_id, &$form_values, &$form) {
  $name = rtrim(ltrim($form_values['name'], '/'), '/');
  form_set_value($form['name'], $name);
  
  if (strpos($name, '/') !== FALSE) {
    form_set_error('name', t('The page name must not contain a slash "/".'));
  }
  if (!valid_url($name)) {
    form_set_error('name', t('The page name has to be a valid URL.'));
  }  
  if ((!$form_values['page'] || $form_values['page']->name != $name) && 
      db_result(db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d AND name = '%s'", $form_values['route']->prid, $name))) {
    form_set_error('name', t('A page with this name already exists. Choose another name.'));
  }
  if (menu_get_item(NULL, $form_values['route']->path .'/'. $name)) {
    form_set_error('name', t('This drupal path is already in use. Choose another name.'));
  }
}

function pageroute_ui_page_edit_submit($form_id, &$form_values) {
  if ($form_values['page']) {
    if ($form_values['op'] == t('Delete')) {
      return 'admin/build/pageroute/route/'. $form_values['route']->prid .'/delete/' . $form_values['page']->name;
    }
    $edit_page = (object)$form_values;
    pageroute_ui_update_page($form_values['route'], $edit_page, $form_values['page']->name);
    pageroute_ui_update_neighbours($form_values['route']);
  }
  else {
    //add a new page
    $edit_page = (object)$form_values;
    db_query("INSERT INTO {pageroute_pages} (prid, name, title, weight, type, options) VALUES(%d, '%s', '%s', %d, '%s', '%s')", 
             $form_values['route']->prid, $form_values['name'], $form_values['title'], $form_values['weight'], $form_values['page_type'], serialize($edit_page->options));
    pageroute_ui_update_neighbours($form_values['route']);
  }
  cache_clear_all('*', 'cache_menu', TRUE);
  return 'admin/build/pageroute/route/'. $form_values['route']->prid;
}



function pageroute_ui_route_overview(&$route) {
  
  drupal_set_title(check_plain($route->path));
  $result = db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d ORDER BY weight, name", $route->prid);
  
  $header = array(t('Name'), t('Title'), t('Type'), t('Weight'), array('data' => t('Operations'), 'colspan' => '2'));
  $types = pageroute_get_types();

  $rows = array();
  while ($page = db_fetch_object($result)) {
    $page->options = unserialize($page->options);
    $row = array();
    $row[] = l($page->name, $route->path .'/'. $page->name);
    $row[] = check_plain($page->title);
    $row[] = ($page->type == 'view' && $page->options['nid'] != 0)
               ? l($types[$page->type], 'node/'. $page->options['nid'])
               : $types[$page->type];
    $row[] = $page->weight;
    $row[] = l(t('Edit'), "admin/build/pageroute/route/$route->prid/edit/$page->name");
    $row[] = l(t('Delete'), "admin/build/pageroute/route/$route->prid/delete/$page->name");
    $rows[] = $row;
  }

  if (empty($rows)) {
    $rows[] = array(array('data' => t('No pages available.'), 'colspan' => '5', 'class' => 'message'));
  }

  return theme('table', $header, $rows, array('id' => 'pageroute_ui_pages'));
}

/*
 * Shows a form for choosing the inital type of the page
 */
function pageroute_ui_page_add_type() {
  
  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Choose a page type'),
    '#options' => pageroute_get_types(),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => submit,
    '#value' => t('Forward'),
  );
  return $form;
}

function pageroute_ui_page_add_type_submit($form_id, &$form_values) {
  return "admin/build/pageroute/route/". arg(4) ."/add/". $form_values['type'];
}


function pageroute_ui_page_delete_confirm($prid, $page_name) {
  $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", $prid));
  $route->options = unserialize($route->options);

  if ($page_name) {
    $page = pageroute_load_page($page_name, $route);
  }
  if (!$page) {
    drupal_not_found();
    exit;
  }

  $form['page'] = array('#type' => 'value', '#value' => $page);
  $form['route'] = array('#type' => 'value', '#value' => $route);
  
  return confirm_form($form,
    t('Are you sure you want to delete the page %name?', array('%name' => $page->name)),
    'admin/build/pageroute/route/'. $route->prid,
    t('This action cannot be undone.'), t('Delete'), t('Cancel')
  );
}

function pageroute_ui_page_delete_confirm_submit($form_id, &$form_values) {
  db_query("DELETE FROM {pageroute_pages} WHERE prid = %d AND name ='%s'",
           $form_values['page']->prid, $form_values['page']->name);
  pageroute_ui_update_neighbours($route = (object)array('prid' => $form_values['page']->prid));
  cache_clear_all('*', 'cache_menu', TRUE);
  drupal_set_message('Your page has been deleted.');
  return 'admin/build/pageroute/route/'. $form_values['page']->prid;
}

/*
 * Determines the neighbours for all pages and writes their names
 * into $page->options['neighbours'] with the keys 'back' and 'forward'
 * so that they can be accessed easily on runtime.
 * 
 * All changfes are stored in the database.
 * 
 * @param $route The route, for which the page neighbours should be updated
 */
function pageroute_ui_update_neighbours(&$route) {
  $result = db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d ORDER BY weight, name", $route->prid);
  
  $pages = array();
  $updated = array();
  $back = (object)array('name' => '');

  while ($the_page = db_fetch_object($result)) {
    $the_page->options = unserialize($the_page->options);

    if (isset($the_page->options['activated']) && !$the_page->options['activated']) {
      continue;
    }

    if ($back->name != $the_page->options['neighbours']['back']) {
      $the_page->options['neighbours']['back'] = $back->name;
      $updated[$the_page->name] = $the_page;
    }
    if ($back->name && $back->options['neighbours']['forward'] != $the_page->name) {
      $back->options['neighbours']['forward'] = $the_page->name;
      $updated[$back->name] = $back;
    }
    $back = $the_page;
  }
  if ($back->options['neighbours']['forward'] != '') {
    $back->options['neighbours']['forward'] = '';
    $updated[$back->name] = $back;
  }
  
  //now store all updates in the db
  foreach ($updated as $the_page) {
    pageroute_ui_update_page($route, $the_page, $the_page->name);
  }
}

/*
 * Stores the updated $page in the database
 */
function pageroute_ui_update_page(&$route, &$page, $old_name) {
  db_query("UPDATE {pageroute_pages} SET name = '%s', title='%s', ".
           "weight = %d, options = '%s' WHERE prid = %d AND name = '%s'",
           $page->name, $page->title, $page->weight,
           serialize($page->options), $route->prid, $old_name);
}

/**
 * Get the help for all page types and show it
 *
 * Modules that contribute a page type should implement hook_pageroute_help().
 */
function _pageroute_ui_get_help() {
  $output = '<p>'. t('The module can be used to provide an userfriendly '.
            'wizard for creating and editing several nodes. It will provide '.
            'new URLs for all pages and optionally create customizable '.
            'back/forward buttons at the bottom of a page, so that users are '.
            'being lead through the route.') .'</p>';

  $output .= '<h2>Pageroute Arguments</h2>';
  $output .= '<p>'. t('Each pageroute takes further arguments to its path. '.
             'Each page type can make use of these arguments, but they need not. '.
             'Have a look at the page type description to see how it handles the arguments.'). '<br />'.
             t('Page types will interprete the first additional argument as node id, '.
             'which is used by most node page types, e.g. by the node editing page. '.
             'The second argument will be interpreted as id of the user for which '.
             'the route will be gone through. E.g. this will affect the author of new nodes. '.
             'Furthermore if you pass an id of 0 pageroute will ignore that argument. '.
             'E.g. you can link to your pageroute by using the path '.
             '"%path" to go through the route as the currently logged in '.
             'user (id 0) and with the node id 4 as first argument.',
             array('%path' => 'pageroutepath/4/0')) .'</p>';

  $output .= '<h2>Page types</h2>';
  $output .= '<p>'. t('Each page has a page type which sets the behaviour of '.
             'the page. All modules can contribute further page types.') .'</p>';

  $type_names = pageroute_get_types();
  foreach (pageroute_get_types('base') as $type => $base) {
    $output .= '<h3>'. $type_names[$type] .'</h3>';
    
    $function = $base .'_page_'. $type .'_help';
    if (function_exists($function)) {
      $output .= '<p>'. $function() .'</p>';
    }
    else {
      $output .= '<p>'. t('There is no help available for this page type.') .'</p>';
    }
  }

  return $output;
}
