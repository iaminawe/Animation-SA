<?php
// $Id: avatar_blocks.module,v 1.1.2.2 2008/08/04 21:59:34 roopletheme Exp $

/**
 * @file
 * This module provides who's online, who's new, and my buddylist blocks that display user pictures.
 */

define('AVATAR_BLOCKS_WHOS_ONLINE', 0);
define('AVATAR_BLOCKS_WHOS_NEW', 1);
define('AVATAR_BLOCKS_MY_BUDDYLIST', 2);

/**
 * Implementation of hook_menu().
 */
function avatar_blocks_menu($may_cache) {
  if ($may_cache) {
  }
  else {
    drupal_add_css('./'. drupal_get_path('module', 'avatar_blocks') .'/avatar_blocks.css');
  }
}

/**
 * Implementation of hook_block().
 */
function avatar_blocks_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[AVATAR_BLOCKS_WHOS_ONLINE]['info'] = t("Who's Online Avatars");
      $blocks[AVATAR_BLOCKS_WHOS_NEW]['info'] = t("Who's New Avatars");
      if (module_exists('buddylist')) {
        $blocks[AVATAR_BLOCKS_MY_BUDDYLIST]['info'] = t("My Buddylist Avatars");
    }
      return $blocks;
    case 'configure':
      $form = array();
      if ($delta == AVATAR_BLOCKS_WHOS_ONLINE) {
        $period = drupal_map_assoc(array(30, 60, 120, 180, 300, 600, 900, 1800, 2700, 3600, 5400, 7200, 10800, 21600, 43200, 86400), 'format_interval');
        $form['avatar_blocks_ol_seconds_online'] = array(
          '#type' => 'select', 
          '#title' => t('User activity'), 
          '#default_value' => variable_get('avatar_blocks_ol_seconds_online', 900), 
          '#options' => $period, 
          '#description' => t('A user is considered online for this long after they have last viewed a page.')
        );
        $form['avatar_blocks_ol_count'] = array(
          '#type' => 'textfield', 
          '#title' => t('Number of users to display'),
          '#default_value' => variable_get('avatar_blocks_ol_count', 10), 
          '#description' => t('Maximum number of currently online users to display.'),
          '#size' => 5,
          '#validate' => array('avatar_blocks_validate_olcount' => array()),
        );
        if (module_exists('imagecache') && imagecache_presets()) {
          $preset_options = array(t('None'));
          foreach (imagecache_presets() as $preset) {
            $preset_options[] = $preset['presetname'];
          }
          $preset_index = array_search(variable_get('avatar_blocks_ol_icpreset',  ''), $preset_options);
          $form['avatar_blocks_ol_icpreset'] = array(
            '#type' => 'select',
            '#title' => t('Imagecache Preset'),
            '#description' => t("Select an Imagecache preset to apply to the avatars."),
            '#options' => $preset_options,
            '#default_value' => $preset_index,
          );
        }
        $form['avatar_blocks_ol_include_text'] = array(
          '#type' => 'checkbox',
          '#title' => t('Include text summary'),
          '#default_value' => variable_get('avatar_blocks_ol_include_text', 0),
          '#description' => t("Enable this option to display a text summary of online users."),
        );
        $form['avatar_blocks_ol_display_noavatar'] = array(
          '#type' => 'checkbox',
          '#title' => t('Display users without avatars'),
          '#default_value' => variable_get('avatar_blocks_ol_display_noavatar', 1),
          '#description' => t("Enable this option to display the default avatar for users without pictures. You must configure a default picture."),
        );
      }
      elseif ($delta == AVATAR_BLOCKS_WHOS_NEW) {
        $form['avatar_blocks_nu_count'] = array(
          '#type' => 'textfield', 
          '#title' => t('Number of users to display'),
          '#default_value' => variable_get('avatar_blocks_nu_count', 10),
          '#description' => t('Maximum number of new users to display.'),
          '#size' => 5,
          '#validate' => array('avatar_blocks_validate_nucount' => array()),
        );
        if (module_exists('imagecache') && imagecache_presets()) {
          $preset_options = array(t('None'));
          foreach (imagecache_presets() as $preset) {
            $preset_options[] = $preset['presetname'];
          }
          $preset_index = array_search(variable_get('avatar_blocks_nu_icpreset',  ''), $preset_options);
          $form['avatar_blocks_nu_icpreset'] = array(
            '#type' => 'select',
            '#title' => t('Imagecache Preset'),
            '#description' => t("Select an Imagecache preset to apply to the avatars."),
            '#options' => $preset_options,
            '#default_value' => $preset_index,
          );
        }
        $form['avatar_blocks_nu_display_noavatar'] = array(
          '#type' => 'checkbox',
          '#title' => t('Display users without avatars'),
          '#default_value' => variable_get('avatar_blocks_nu_display_noavatar', 1),
          '#description' => t("Enable this option to display the default avatar for users without pictures. You must configure a default picture."),
        );
      }
      elseif ($delta == AVATAR_BLOCKS_MY_BUDDYLIST) {
        $form['avatar_blocks_bl_count'] = array(
          '#type' => 'textfield', 
          '#title' => t('Number of buddies to display'),
          '#default_value' => variable_get('avatar_blocks_bl_count', 10),
          '#description' => t('Maximum number of buddies to display.'),
          '#size' => 5,
          '#validate' => array('avatar_blocks_validate_blcount' => array()),
        );
        if (module_exists('imagecache') && imagecache_presets()) {
          $preset_options = array(t('None'));
          foreach (imagecache_presets() as $preset) {
            $preset_options[] = $preset['presetname'];
          }
          $preset_index = array_search(variable_get('avatar_blocks_bl_icpreset',  ''), $preset_options);
          $form['avatar_blocks_bl_icpreset'] = array(
            '#type' => 'select',
            '#title' => t('Imagecache Preset'),
            '#description' => t("Select an Imagecache preset to apply to the avatars."),
            '#options' => $preset_options,
            '#default_value' => $preset_index,
          );
        }
        $form['avatar_blocks_bl_display_noavatar'] = array(
          '#type' => 'checkbox',
          '#title' => t('Display buddies without avatars'),
          '#default_value' => variable_get('avatar_blocks_bl_display_noavatar', 1),
          '#description' => t("Enable this option to display the default avatar for buddies without pictures. You must configure a default picture."),
        );
      }
      return $form;
    case 'save':
      if ($delta == AVATAR_BLOCKS_WHOS_ONLINE) {
        // save our block-specific settings.
        if ($edit['avatar_blocks_ol_icpreset']) {
          $preset_options = array(t('None'));
          foreach (imagecache_presets() as $preset) {
            $preset_options[] = $preset['presetname'];
          }
          variable_set('avatar_blocks_ol_icpreset', $preset_options[$edit['avatar_blocks_ol_icpreset']]);
        }
        else {
          variable_del('avatar_blocks_ol_icpreset');
        }
        variable_set('avatar_blocks_ol_seconds_online', $edit['avatar_blocks_ol_seconds_online']);
        variable_set('avatar_blocks_ol_count', $edit['avatar_blocks_ol_count']);
        variable_set('avatar_blocks_ol_include_text', $edit['avatar_blocks_ol_include_text']);
        variable_set('avatar_blocks_ol_display_noavatar', $edit['avatar_blocks_ol_display_noavatar']);
      }
      elseif ($delta == AVATAR_BLOCKS_WHOS_NEW) {
        // save our block-specific settings.
        if ($edit['avatar_blocks_nu_icpreset']) {
          $preset_options = array(t('None'));
          foreach (imagecache_presets() as $preset) {
            $preset_options[] = $preset['presetname'];
          }
          variable_set('avatar_blocks_nu_icpreset', $preset_options[$edit['avatar_blocks_nu_icpreset']]);
        }
        else {
          variable_del('avatar_blocks_nu_icpreset');
        }
        variable_set('avatar_blocks_nu_count', $edit['avatar_blocks_nu_count']);
        variable_set('avatar_blocks_nu_display_noavatar', $edit['avatar_blocks_nu_display_noavatar']);
      }
      elseif ($delta == AVATAR_BLOCKS_MY_BUDDYLIST) {
        // save our block-specific settings.
        if ($edit['avatar_blocks_bl_icpreset']) {
          $preset_options = array(t('None'));
          foreach (imagecache_presets() as $preset) {
            $preset_options[] = $preset['presetname'];
          }
          variable_set('avatar_blocks_bl_icpreset', $preset_options[$edit['avatar_blocks_bl_icpreset']]);
        }
        else {
          variable_del('avatar_blocks_bl_icpreset');
        }
        variable_set('avatar_blocks_bl_count', $edit['avatar_blocks_bl_count']);
        variable_set('avatar_blocks_bl_display_noavatar', $edit['avatar_blocks_bl_display_noavatar']);
      }
      return;
    case 'view': default:
      switch ($delta) {
        case AVATAR_BLOCKS_WHOS_ONLINE:
          if (user_access('access content')) {
            $block['subject'] = t("Who's Online");
            $block['content'] = avatar_blocks_whos_online();
          }
          break;
        case AVATAR_BLOCKS_WHOS_NEW:
          if (user_access('access content')) {
            $block['subject'] = t("Who's New");
            $block['content'] = avatar_blocks_newest_members();
          }
          break;
        case AVATAR_BLOCKS_MY_BUDDYLIST:
          if (user_access('access content')) {
            $block['subject'] = t("My Buddylist");
            $block['content'] = avatar_blocks_my_buddylist();
          }
          break;
      }
      return $block;
  }
}

/**
* validate the who's online config block form.
*/
function avatar_blocks_validate_olcount($element) {
  if (($element['#value'] != '') && (!is_numeric($element['#value']))) {
    form_set_error('avatar_blocks_ol_count', t('Number of users must be a number'));
  }
}

/**
* validate the who's new config block form.
*/
function avatar_blocks_validate_nucount($element) {
  if (($element['#value'] != '') && (!is_numeric($element['#value']))) {
    form_set_error('avatar_blocks_nu_count', t('Number of users must be a number'));
  }
}

/**
* validate the my buddylist config block form.
*/
function avatar_blocks_validate_blcount($element) {
  if (($element['#value'] != '') && (!is_numeric($element['#value']))) {
    form_set_error('avatar_blocks_bl_count', t('Number of buddies must be a number'));
  }
}

/**
* returns a user name.
*/
function avatar_blocks_getname($online_member) {
  return $online_member->name;
}


/**
* returns a user name.
*/
function avatar_blocks_getuserlink($online_member) {
  return theme_username($online_member);
}

/**
* returns a formated avatar link.
*/
function avatar_blocks_getavatar($online_member, $imagecache_preset = '') {
  // are we using an imagecache preset?
  $default_picture = variable_get('user_picture_default',  '');
  if (module_exists('imagecache') && ($imagecache_preset != '')) {
    $preset_options = array();
    foreach (imagecache_presets() as $preset) {
      $preset_options[] = $preset['presetname'];
    }
    // does the specified preset exist?
    if (!(array_search($imagecache_preset, $preset_options) === FALSE)) {
      if ($online_member->picture) {
        // process the user's picture with imagecache
        $output .= l(theme("imagecache", $imagecache_preset, $online_member->picture, $online_member->name, $online_member->name), "user/".$online_member->uid, array('title' => $online_member->name), NULL, NULL, FALSE, TRUE);
      }
      else {
        // process the default picture with imagecache
        $output .= l(theme("imagecache", $imagecache_preset, $default_picture, $online_member->name, $online_member->name), "user/".$online_member->uid, array('title' => $online_member->name), NULL, NULL, FALSE, TRUE);
      }
    }
    // no such preset, just call theme_user_picture
    else {
      $output .= theme_user_picture($online_member);
    }
  }
  // not using imagecache, just call theme_user_picture
  else {
    $output .= theme_user_picture($online_member);
  }
  return $output;
}

/**
* who's online display.
*
* Displays the pictures of online users.
*/
function avatar_blocks_whos_online() {
  $interval = time() - variable_get('user_block_seconds_online', 900);
  $imagecache_preset = variable_get('avatar_blocks_ol_icpreset',  '');
  $anonymous_count = sess_count($interval);
  $display_count = variable_get('avatar_blocks_ol_count',  10);
  if (!is_numeric($display_count)) {
    $display_count = 10;
  }
  $sql = 'SELECT DISTINCT u.uid, u.name, u.picture, s.timestamp FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= %d AND s.uid > 0 ORDER BY s.timestamp DESC';
  $authenticated_users = db_query_range($sql, $interval, 0, $display_count);
  $authenticated_count = db_num_rows($authenticated_users);
  if (variable_get('avatar_blocks_ol_display_noavatar', 1) == 0) {
    $sql = 'SELECT DISTINCT u.uid, u.name, u.picture, s.timestamp FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= %d AND s.uid > 0 AND u.picture <> "" ORDER BY s.timestamp DESC';
    $display_users = db_query_range($sql, $interval, 0, $display_count);
  }
  else {
    $display_users = $authenticated_users;
  }
  $display_count = db_num_rows($display_users);
  if ($display_count) {
    $online_members = array();
    while ($next_member = db_fetch_object($display_users)) {
      $online_members[] = $next_member;
    }
  $output = theme_avatar_blocks_block($online_members, $imagecache_preset);
  }
  if (variable_get('avatar_blocks_ol_include_text', 0)) {
    // Format the output with proper grammar.
    if ($anonymous_count == 1 && $authenticated_count == 1) {
      $output .= t('There is currently %members and %visitors online.', array('%members' => format_plural($authenticated_count, '1 user', '@count users'), '%visitors' => format_plural($anonymous_count, '1 guest', '@count guests')));
  }
    else {
      $output .= t('There are currently %members and %visitors online.', array('%members' => format_plural($authenticated_count, '1 user', '@count users'), '%visitors' => format_plural($anonymous_count, '1 guest', '@count guests')));
    }
  }
  return $output;
}

/**
* who's new display.
*
* Displays the pictures of new users.
*/
function avatar_blocks_newest_members() {
  $imagecache_preset = variable_get('avatar_blocks_nu_icpreset',  '');
  $display_count = variable_get('avatar_blocks_nu_count',  10);
  if (!is_numeric($display_count)) {
    $display_count = 10;
  }
  if (variable_get('avatar_blocks_nu_display_noavatar', 1)) {
    $sql = 'SELECT uid,name,picture FROM {users} WHERE uid > 0 AND access > 0 ORDER BY created DESC';
  }
  else {
    $sql = 'SELECT uid,name,picture FROM {users} WHERE uid > 0 AND access > 0 AND picture <> "" ORDER BY created DESC';
  }
  $new_member_list = db_query_range($sql, 0, $display_count);

  $new_members = array();
  while ($next_member = db_fetch_object($new_member_list)) {
    $new_members[] = $next_member;
  }
  $output = theme_avatar_blocks_block($new_members, $imagecache_preset);
  return $output;
}

/**
* my buddylist display.
*
* Displays the pictures buddylist members.
*/
function avatar_blocks_my_buddylist() {
  $imagecache_preset = variable_get('avatar_blocks_bl_icpreset',  '');
  $default_picture = variable_get('user_picture_default',  '');
  $display_count = variable_get('avatar_blocks_bl_count',  10);
  if (!is_numeric($display_count)) {
    $display_count = 10;
  }
  if (module_exists('buddylist')) {
    $buddy_ids = array_keys(buddylist_get_buddies());
    if (count($buddy_ids)) {
      $buddy_ids_str = '('. implode(',', $buddy_ids). ')';
      if (variable_get('avatar_blocks_bl_display_noavatar', 1)) {
        $sql = 'SELECT uid,name,picture FROM {users} WHERE uid > 0 AND access > 0 AND uid IN %s ORDER BY created DESC';
      }
      else {
        $sql = 'SELECT uid,name,picture FROM {users} WHERE uid > 0 AND access > 0 AND uid IN %s AND picture <> "" ORDER BY created DESC';
      }
      $my_buddylist_list = db_query_range($sql, $buddy_ids_str, 0, $display_count);

      $buddies = array();
      while ($next_buddy = db_fetch_object($my_buddylist_list)) {
        $buddies[] = $next_buddy;
      }
      $output = theme_avatar_blocks_block($buddies, $imagecache_preset);
    }
  }
  return $output;
}

/**
* 
*/
function theme_avatar_blocks_block($online_members, $imagecache_preset) {
  if (count($online_members)) {
    foreach ($online_members as $online_member) {
      $output .= theme('avatar_blocks_avatar', avatar_blocks_getavatar($online_member, $imagecache_preset), avatar_blocks_getname($online_member), avatar_blocks_getuserlink($online_member));
    }
    if ($output) { 
      $output .= '<div style="clear:both"></div>'; 
    }
  }
  return $output;
}

/**
* 
*/
function theme_avatar_blocks_avatar($avatar_link, $name, $userlink) {
  if ($avatar_link) {
    $output = '<div class="userpicture">';
    $output .= $avatar_link;
    $output .= '</div>';
  }
  return $output;
}

/**
* Check for new or deleted uploads and clear the imagecache if necessary.
*/
function avatar_blocks_profiles_user_edit_submit($form_id, $form_values) {
  if (file_check_upload('picture_upload') || $form_values['picture_delete']) {
    imagecache_image_flush($form_values['picture']);
  }
}
