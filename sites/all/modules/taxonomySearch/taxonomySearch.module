<?php
// $Id $

/**
 * @file
 * Allow users to preselect a drop down given a taxonomy
 *
 * @author Mark Burton (aka markfoodyburton)
 */


/**
 * Implementation of hook_widget_info.
 * Specifies the label and that it is a widget for the nodereference field type
 */

function taxonomySearch_widget_info()
{
  return array(
    'taxonomySearch_select' => array(
      'label' => 'Taxonomy Search List',
      'field types' => array('nodereference'),
    ),
  );
}

/**
 * set up the taxonomy to be used
 */
function taxonomySearch_widget_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();

      $form['vocabulary'] = array(
        '#type' => 'fieldset',
        '#title' => t('Specify terms to show'),
        '#collapsible' => TRUE,
      );
      
      $options_voc = array();
      foreach (taxonomy_get_vocabularies() as $voc) {
        $options_voc[$voc->vid] = $voc->name;
      }
      
      $form['vocabulary']['ts_vid'] = array(
        '#title' => t('Vocabulary'),
        '#type' => 'select',
        '#default_value' => isset($field['ts_vid']) ? $field['ts_vid'] : 0,
        '#options' => $options_voc,
	'#required' => TRUE,
      );
      

      return $form;
      break;

    case 'save':
      return array('ts_vid');
      

  }
}


/**
 * the behavior of taxonomySearch
 */

function taxonomySearch_widget($op, &$node, $field, &$items) {
  include_once(drupal_get_path('module', 'content').'/nodereference.module');
  include_once(drupal_get_path('module', 'content_taxonomy').'/content_taxonomy.module');

  switch ($op) {
    case 'prepare form values':
      if ($field['multiple']) {
        $items_transposed = content_transpose_array_rows_cols($items);
        $items['default nids'] = $items_transposed['nid'];
      }
      else {
        $items['default nids'] = array($items['nid']);
      }
      break;

    case 'form':
      drupal_add_js(drupal_get_path('module', 'taxonomySearch') . '/taxonomySearch.js');
      drupal_add_js(drupal_get_path('module', 'taxonomySearch') . '/jquery-select.js');
      $form = array();

      $fieldname=$field['field_name'];

      $form[$fieldname] = array(
        '#tree' => TRUE,
        '#type' => 'fieldset',
        '#title' => t($field['widget']['label']),
        '#collapsible' => TRUE,
      );

      
      $options_term = array();
      foreach (taxonomy_get_tree($field['widget']['ts_vid']) as $term) {
        $options_term[$term->tid] = $term->name;
      }

      
      $form[$fieldname]['ts_tids'] = array(
        '#type' => 'select',
        '#title' => t($field['widget']['label'])."  Selector ",
        '#default_value' => $items['default tids'],
        '#multiple' => $field['multiple'],
        '#options' => $options_term,
        '#required' => $field['required'],
        '#description' => $field['widget']['description'],
        '#attributes' => array(
            'class' => "taxonomySearch_tids",
            'id' => "$fieldname",
          ),
      );

        $options = _nodereference_potential_references($field, true);
        foreach ($options as $key => $value) {
          $options[$key] = _nodereference_item($field, $value);
        }
        if (!$field['required']) {
          $options = array(0 => t('<none>')) + $options;
        }
        

      $form[$fieldname]['nids'] = array(
        '#type' => 'select',
        '#title' => t($field['widget']['label']),
        '#default_value' => $items['default nids'],
        '#multiple' => $field['multiple'],
        '#options' => $options,
        '#required' => $field['required'],
        '#description' => $field['widget']['description'],
        '#attributes' => array(
            'class' => "taxonomySearch_nids",
            'id' => "$fieldname",
          ),
      );
      return $form;

    case 'process form values':
        unset($items['ts_tids']);
        if ($field['multiple']) {
          // if nothing selected, make it 'none'
          if (empty($items['nids'])) {
            $items['nids'] = array(0 => '0');
          }
          // drop the 'none' options if other items were also selected
          elseif (count($items['nids']) > 1) {
            unset($items['nids'][0]);
          }
          
          $items = array_values(content_transpose_array_rows_cols(array('nid' => $items['nids'])));
        }
        else {
          $items[0]['nid'] = $items['nids'];
        }
        // Remove the widget's data representation so it isn't saved.
        unset($items['nids']);
        foreach ($items as $delta => $item) {
          $items[$delta]['error_field'] =  $field['field_name'] .'][nids';
        }
        
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function taxonomySearch_menu($may_cache) {

  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'taxonomySearch/autocomplete',
      'title' => 'autocomplete for taxonomy',
      'type' => MENU_CALLBACK,
      'callback' => 'taxonomySearch_autocomplete',
      'access' => user_access('access content'),
      );
  }
  return $items;
  
} 



/**
* return back nodes that are tagged with $string.
*/
function taxonomySearch_autocomplete($field_name, $string = '') {
  $fields = content_fields();
  $field = $fields[$field_name];
  $matches = array();


  foreach (_nodereference_potential_references($field, TRUE, '') as $row) {
    
    $tags=taxonomy_node_get_terms($row->nid);
    if (isset($tags[$string])) {
            $matches[$row->nid] = _nodereference_item($field, $row, TRUE);
//            $matches[$row->node_title .' [nid:'. $row->nid .']'] = _nodereference_item($field, $row, TRUE);
    }
  }
  print drupal_to_js($matches);
  
  
  exit();
}


?>
