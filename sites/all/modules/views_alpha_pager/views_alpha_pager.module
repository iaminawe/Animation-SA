<?php
// $Id: views_alpha_pager.module,v 1.5.2.40 2008/07/02 10:39:45 douggreen Exp $

/**
 * Views Alpha Pager module
 *
 * Implement an alphabet pager for views that can be used instead of
 * the default numeric page number pager
 *
 * by Doug Green
 */

/**
 * Implementation of hook_menu()
 */
function views_alpha_pager_menu($may_cache = true) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/views_alpha_pager',
      'title' => t('Views Alpha Pager'),
      'description' => t('Configure settings for the Views Alpha Pager'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'views_alpha_pager_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM, // optional
    );
  }
  return $items;
}

function views_alpha_pager_settings() {
  $form['views_alpha_pager_ignore'] = array(
    '#type' => 'textfield',
    '#title' => t('Ignore Leading Words'),
    '#default_value' => variable_get('views_alpha_pager_ignore', t('a the and')),
    '#description' => t('When sorting, ignore leading common words.  Dynamically removing these leading words is database intensive.  If you are having performance problems, try limiting the number of leading words or remove them altogether (by clearing the words in this field).'),
  );
  $form['views_alpha_pager_default'] = array(
    '#type' => 'radios',
    '#title' => t('Default'),
    '#default_value' => variable_get('views_alpha_pager_default', 'a'),
    '#options' => array('a' => t('First Letter'), '*' => t('All')),
    '#description' => t('Selecting "All" will display all values when no page is selected, howerver, it will still use the numeric pager'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_help()
 */
function views_alpha_pager_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables an alphabet pager option for views.');
    default :
      return;
  }
}

function views_alpha_pager_form_alter($form_id, &$form) {
  if ($form_id == 'views_edit_view') {
    $vid = isset($form['vid']['#value']) ? $form['vid']['#value'] : 0;
    if ($vid > 0 && ($placement = _views_alpha_pager_get_placement($vid))) {
      $default_value = $placement;
    }
    else {
      $default_value = (int) $form['page-info']['use_pager']['#default_value'];
    }
    $form['page-info']['use_pager'] = array(
      '#type' => 'select',
      '#title' => t('Pager'),
      '#default_value' => $default_value,
      '#options' => array(0 => t('None'), 1 => t('numeric'), 2 => t('alpha (top and bottom)'), 3 => t('alpha (top only)'), 4 => t('alpha (bottom only)')),
      '#description' => t('If selected this query may be multiple pages. If not selected this query will be one page.'),
      '#validate' => array('views_alpha_pager_validate' => array())
      );
    $form['#submit'] = array_merge(
      $form['#submit'], array('views_alpha_pager_submit' => array()));
  }
}

function views_alpha_pager_validate() {
  global $form_values;
  if (isset($form_values['vid'])) { // should always be set
    if ($form_values['use_pager'] >= 2) {
      if (_views_alpha_pager_get_placement($form_values['vid'])) {
        db_query("UPDATE {views_alpha_pager} SET placement = %d WHERE vid = %d", $form_values['use_pager'], $form_values['vid']);
      }
      else {
        db_query("INSERT INTO {views_alpha_pager} (placement, vid) VALUES (%d, %d)", $form_values['use_pager'], $form_values['vid']);
      }
      $form_values['use_pager'] = 1;
    }
    else {
      db_query("DELETE FROM {views_alpha_pager} WHERE vid = %d", $form_values['vid']);
    }
    _views_alpha_pager_get_placement(FALSE, TRUE);
  }
}

/*
 * These are only used if the pre-query hook exists
 */

function views_alpha_pager_views_pre_query(&$view) {
  if (_views_alpha_pager_get_placement_from_view($view)) {
    $view->is_cacheable = FALSE;
  }
}

function views_alpha_pager_views_query_alter(&$query, &$view, $summary, $level) {
  $placement = _views_alpha_pager_get_placement_from_view($view);
  if (!$placement) {
    return;
  }

  // NOTE: if the sort field isn't alpha, the results don't make sense
  // NOTE: should we remove this check and just always look for fields first
  if ($view->page_type == 'table' || $view->page_type == 'search') {
    foreach ($view->field as $field) {
      if (!empty($field['sortable'])) {
        $sort_field = $field['fullname'];
        break;
      }
    }
  }
  if (!isset($sort_field) && isset($view->sort['0']['field'])) {
    $sort_field = $view->sort['0']['field'];
  }
  if (!isset($sort_field)) {
    drupal_set_message(t('Alpha Pager enabled without a sort column, please set a sort column, defaulting to numeric pager'), 'error');
    return;
  }

  // build the array of leading ignore words
  // NOTE: if the user removes the ignore words, don't do any ignore processing
  $myfield = 'UPPER('. $sort_field .')';
  if ($ignore = variable_get('views_alpha_pager_ignore', 'a the and')) {
    $trimterms = array(' ', '"', '\\\'');
    foreach (explode(' ', $ignore) as $word) {
      $trimterms[] = check_plain($word) .' ';
    }

    // use the ignore words to trim sort field
    foreach ($trimterms as $trim) {
      $myfield = "TRIM(LEADING '". strtoupper($trim) ."' FROM ($myfield))";
    }
  }
  $myfield = "LEFT($myfield, 1)";

  // build the query to get the pages
  $pattern = array(
    '/^SELECT (.*)(?= FROM {node} node) FROM /i',
    '/ ORDER BY .*$/i',
    '/ GROUP BY [a-z_0-9]+(\.[a-z_0-9]+)?(\s*,\s*[a-z_0-9]+(\.[a-z_0-9]+)?)*/i',
  );
  $replace = array(
    "SELECT DISTINCT $myfield FROM ",
    " ORDER BY $myfield",
    "",
  );
  $countquery = preg_replace($pattern, $replace, $query->query(), 1);

  // execute the query to get the alpha pages in use
  $result = db_query($countquery, $query->where_args);
  $items = array();
  while ($item = db_fetch_object($result)) {
    if (ctype_alpha($item->$myfield)) {
      $items[$item->$myfield] = $item->$myfield;
    }
    elseif (ctype_digit($item->$myfield)) {
      $items['0'] = '#';
    }
    else {
      $items['_'] = '_';
    }
  }
  $items['*'] = t('All');

  // determine which page we are on
  $apage = isset($_GET['apage']) ? substr($_GET['apage'], 0, 1) : '';
  if ($apage != '*') {
    if ($apage == '') {
      if (variable_get('views_alpha_pager_default', 'a') == 'a') {
        // if no page specified, use first alpha page (non-numeric/non-punctuation)
        foreach ($items as $item_display) {
          if ($item_display >= 'A' && $item_display <= 'Z') {
            $apage = $item_display;
            break;
          }
        }
      }
      else {
        $apage = '*';
      }
    }
    if ($apage != '*') {
      // modify the view and count queries for the alpha page we are on
      if (ctype_alpha($apage)) {
        $where = "$myfield = '$apage'";
      }
      elseif ($apage == '0') {
        $where = "INSTR('0123456789', $myfield) > 0";
      }
      else {
        $where = "INSTR('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', $myfield) = 0";
      }
      $query->add_where($where);
      $query->orderby = array_merge(array($myfield), $query->orderby);
    }
  }

  // save the pager so we can add it to the top and bottom easily
  $link = isset($view->alpha_pager_link) ? $view->alpha_pager_link : array(
    'href' => $_GET['q'],
    'query' => drupal_query_string_encode($_GET, array('q', 'apage', 'page'))
  );
  $placements = array('both', 'top', 'bottom');
  $view->alpha_pager_placement = $placements[$placement - 2];
  $view->alpha_pager_output = theme('alpha_pager', $items, $apage, $link);
}

function _views_alpha_pager_build_query(&$view) {
  // if the query doesn't exist
  if (!$view->query) {
    $path = drupal_get_path('module', 'views');
    require_once("$path/views_query.inc");
    if ($view->view_args_php) {
      ob_start();
      $result = eval($view->view_args_php);
      if (is_array($result)) {
        $args = $result;
      }
      ob_end_clean();
    }
    $info = _views_build_query($view, $args);
    $view->query = _views_replace_args($info['query'], $info['args']);
    $view->countquery = _views_replace_args($info['countquery'], $info['args']);
  }
  $query = $view->query;

  // Run-time replacement so we can do cacheing
  $replacements = module_invoke_all('views_query_substitutions', $view);
  foreach ($replacements as $src => $dest) {
    $query = str_replace($src, $dest, $query);
  }
  return $query;
}

function views_alpha_pager_views_pre_view($view, $items) {
  return theme('views_alpha_pager_top', $view, $items);
}

function theme_views_alpha_pager_top($view, $items) {
  if ($view->alpha_pager_placement != 'bottom' && $view->alpha_pager_output) {
    return '<div class="apager-top">'. $view->alpha_pager_output .'</div>';
  }
}

function views_alpha_pager_views_post_view($view, $items, $output) {
  return theme('views_alpha_pager_bottom', $view, $items);
}

function theme_views_alpha_pager_bottom($view, $items) {
  if ($view->alpha_pager_placement != 'top' && $view->alpha_pager_output) {
    return '<div class="apager-bottom">'. $view->alpha_pager_output .'</div>';
  }
}

function theme_alpha_pager($items, $current = '', $link = array()) {
  // add style sheet
  $modpath = drupal_get_path('module', 'views_alpha_pager');
  drupal_add_css($modpath .'/views_alpha_pager.css', 'module');

  $output = '';

  if (!empty($items)) {
    $output .= '<div class="apager"><span class="pager-list">';
    foreach ($items as $item => $item_display) {
      $class = 'pager-'. ($item == '*' ? 'all' : strtolower($item));
      if ("$item" == "$current") {
        $output .= '<strong class="'. $class .' pager-current">'. $item_display .'</strong> ';
      }
      else {
        if ($item < $current) {
          $class .= ' pager-previous';
        }
        else {
          $class .= ' pager-next';
        }
        $output .= theme('alpha_pager_link', $item, $item_display, array('class' => $class), $link);
      }
      $output .= ' ';
    }
    $output .= '</span></div>';

    return $output;
  }
}

function theme_alpha_pager_link($item, $item_display, $attributes = array(), $link = array()) {
  if ($link['query'] != '') {
    $link['query'] .= '&';
  }
  $link['query'] .= 'apage='. $item;
  $attributes['title'] = t('Go to @page listings', array('@page' => $item_display));
  return l($item_display, $link['href'], $attributes, $link['query']);
}

function _views_alpha_pager_get_placement_from_view($view) {
  if (isset($view->alpha_pager_placement)) {
    return $view->alpha_pager_placement;
  }
  return _views_alpha_pager_get_placement($view->vid);
}

function _views_alpha_pager_get_placement($vid = FALSE, $reset = FALSE) {
  static $cache;
  if ($reset || !isset($cache)) {
    $cache = array(FALSE => 0);
  }
  if ($vid !== FALSE && !isset($cache[$vid])) {
    $placement = db_result(db_query("SELECT placement from {views_alpha_pager} WHERE vid = %d", $vid));
    if (!isset($placement)) {
      $placement = 0;
    }
    $cache[$vid] = $placement;
  }
  return $cache[$vid];
}
